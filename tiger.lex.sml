functor TigerLexFun (structure Tokens: Tiger_TOKENS)  = struct

    structure yyInput : sig

        type stream
	val mkStream : (int -> string) -> stream
	val fromStream : TextIO.StreamIO.instream -> stream
	val getc : stream -> (Char.char * stream) option
	val getpos : stream -> int
	val getlineNo : stream -> int
	val subtract : stream * stream -> string
	val eof : stream -> bool
	val lastWasNL : stream -> bool

      end = struct

        structure TIO = TextIO
        structure TSIO = TIO.StreamIO
	structure TPIO = TextPrimIO

        datatype stream = Stream of {
            strm : TSIO.instream,
	    id : int,  (* track which streams originated 
			* from the same stream *)
	    pos : int,
	    lineNo : int,
	    lastWasNL : bool
          }

	local
	  val next = ref 0
	in
	fun nextId() = !next before (next := !next + 1)
	end

	val initPos = 2 (* ml-lex bug compatibility *)

	fun mkStream inputN = let
              val strm = TSIO.mkInstream 
			   (TPIO.RD {
			        name = "lexgen",
				chunkSize = 4096,
				readVec = SOME inputN,
				readArr = NONE,
				readVecNB = NONE,
				readArrNB = NONE,
				block = NONE,
				canInput = NONE,
				avail = (fn () => NONE),
				getPos = NONE,
				setPos = NONE,
				endPos = NONE,
				verifyPos = NONE,
				close = (fn () => ()),
				ioDesc = NONE
			      }, "")
	      in 
		Stream {strm = strm, id = nextId(), pos = initPos, lineNo = 1,
			lastWasNL = true}
	      end

	fun fromStream strm = Stream {
		strm = strm, id = nextId(), pos = initPos, lineNo = 1, lastWasNL = true
	      }

	fun getc (Stream {strm, pos, id, lineNo, ...}) = (case TSIO.input1 strm
              of NONE => NONE
	       | SOME (c, strm') => 
		   SOME (c, Stream {
			        strm = strm', 
				pos = pos+1, 
				id = id,
				lineNo = lineNo + 
					 (if c = #"\n" then 1 else 0),
				lastWasNL = (c = #"\n")
			      })
	     (* end case*))

	fun getpos (Stream {pos, ...}) = pos

	fun getlineNo (Stream {lineNo, ...}) = lineNo

	fun subtract (new, old) = let
	      val Stream {strm = strm, pos = oldPos, id = oldId, ...} = old
	      val Stream {pos = newPos, id = newId, ...} = new
              val (diff, _) = if newId = oldId andalso newPos >= oldPos
			      then TSIO.inputN (strm, newPos - oldPos)
			      else raise Fail 
				"BUG: yyInput: attempted to subtract incompatible streams"
	      in 
		diff 
	      end

	fun eof s = not (isSome (getc s))

	fun lastWasNL (Stream {lastWasNL, ...}) = lastWasNL

      end

    datatype yystart_state = 
REM | ESCAPE | STRING | COMMENT | INITIAL
    structure UserDeclarations = 
      struct

(*******************************************************************************
 * File:        tiger.lex
 * Authors:     Jake Derry, Radu Vasilescu
 * 
 * Description: Provides the ML-Lex configuration for the Tiger lexer.
 ******************************************************************************)

(* ===== Shortcuts ===== *)

type pos = int
(* type lexresult = Tokens.token *)

(* Shortcut function to calculate the start and end positions of a token *)
fun s_e pos text = 
  let val _ = SockSound.play (if pos < 10 then "c4"
                                else if pos < 20 then "d#4"
                                else if pos < 30 then "g4"
                                else if pos < 40 then "a#4"
                                else "b4", 0.1)
  in  (pos, pos + String.size text)
  end



(* ===== Globals ===== *)

(* Efficiently count line numbers. *)
val lineNum = ErrorMsg.lineNum
val linePos = ErrorMsg.linePos

val inComment = ref false

fun err (p1, p2) = ErrorMsg.error p1



(* ===== String literals ===== *)

(* This value keeps track of the string literal being parsed so far. *)
val currentString = ref ""



(* ===== EOF Handler ===== *)

(* Deals with reaching the end of file. *)
fun eof () = 
  let val pos = hd (!linePos) 
  in  case (!currentString, !inComment)
        of ("", false) => Tokens.EOF (pos, pos)
         | ("", true)  => (ErrorMsg.error pos 
                                          ("Expected end of comment, \
                                          \ found EOF");
                           Tokens.EOF (pos, pos))
         | (_,  _)     => (ErrorMsg.error pos 
                                          ("Expected end of string, \
                                          \ found EOF");
                           Tokens.EOF (pos, pos))
  end




(* Added from textbook page 82: *)
type svalue = Tokens.svalue
type pos = int
type ('a, 'b) token = ('a, 'b) Tokens.token
type lexresult = (svalue, pos) token



(* If you're wondering why there's an unused "REM" state, 
   it's so we can use comments in the lexer definitions below
   the [double %]... It's a dirty hack but  *shrug*  *)



      end

    datatype yymatch 
      = yyNO_MATCH
      | yyMATCH of yyInput.stream * action * yymatch
    withtype action = yyInput.stream * yymatch -> UserDeclarations.lexresult

    local

    val yytable = 
#[([(#"\^@",#"\b",5),
(#"\v",#"\f",5),
(#"\^N",#"\^_",5),
(#"!",#"<",5),
(#">",#"@",5),
(#"D",#"D",5),
(#"G",#"H",5),
(#"K",#"O",5),
(#"Q",#"V",5),
(#"X",#"`",5),
(#"b",#"r",5),
(#"t",#"v",5),
(#"x",#"\255",5),
(#"\t",#"\t",6),
(#"\r",#"\r",6),
(#" ",#" ",6),
(#"\n",#"\n",7),
(#"=",#"=",8),
(#"A",#"A",9),
(#"B",#"B",10),
(#"C",#"C",11),
(#"E",#"E",12),
(#"F",#"F",13),
(#"I",#"I",14),
(#"J",#"J",15),
(#"P",#"P",16),
(#"W",#"W",17),
(#"a",#"a",18),
(#"s",#"s",19),
(#"w",#"w",20)], []), ([(#"\^@",#"\b",5),
(#"\v",#"\f",5),
(#"\^N",#"\^_",5),
(#"!",#"!",5),
(#"#",#"/",5),
(#":",#"[",5),
(#"]",#"]",5),
(#"_",#"e",5),
(#"g",#"m",5),
(#"o",#"s",5),
(#"u",#"\255",5),
(#"\t",#"\t",915),
(#"\r",#"\r",915),
(#" ",#" ",915),
(#"\n",#"\n",916),
(#"\"",#"\"",917),
(#"0",#"9",918),
(#"\\",#"\\",919),
(#"^",#"^",920),
(#"f",#"f",921),
(#"n",#"n",922),
(#"t",#"t",923)], []), ([(#"\^@",#"\b",929),
(#"\v",#"\f",929),
(#"\^N",#"\^_",929),
(#"!",#"!",929),
(#"#",#"[",929),
(#"]",#"\255",929),
(#"\t",#"\t",930),
(#"\r",#"\r",930),
(#" ",#" ",930),
(#"\n",#"\n",931),
(#"\"",#"\"",932),
(#"\\",#"\\",933)], []), ([(#"\^@",#"\b",935),
(#"\v",#"\f",935),
(#"\^N",#"\^_",935),
(#"!",#")",935),
(#"+",#"\255",935),
(#"\t",#"\t",936),
(#"\r",#"\r",936),
(#" ",#" ",936),
(#"\n",#"\n",7),
(#"*",#"*",937)], []), ([(#"\^@",#"\b",5),
(#"\v",#"\f",5),
(#"\^N",#"\^_",5),
(#"!",#"!",5),
(#"#",#"%",5),
(#"'",#"'",5),
(#"?",#"@",5),
(#"\\",#"\\",5),
(#"^",#"`",5),
(#"~",#"\255",5),
(#"\t",#"\t",6),
(#"\r",#"\r",6),
(#" ",#" ",6),
(#"\n",#"\n",7),
(#"\"",#"\"",939),
(#"&",#"&",940),
(#"(",#"(",941),
(#")",#")",942),
(#"*",#"*",943),
(#"+",#"+",944),
(#",",#",",945),
(#"-",#"-",946),
(#".",#".",947),
(#"/",#"/",948),
(#"0",#"9",949),
(#":",#":",950),
(#";",#";",951),
(#"<",#"<",952),
(#"=",#"=",953),
(#">",#">",954),
(#"A",#"Z",955),
(#"c",#"c",955),
(#"g",#"h",955),
(#"j",#"k",955),
(#"m",#"m",955),
(#"p",#"s",955),
(#"u",#"u",955),
(#"x",#"z",955),
(#"[",#"[",956),
(#"]",#"]",957),
(#"a",#"a",958),
(#"b",#"b",959),
(#"d",#"d",960),
(#"e",#"e",961),
(#"f",#"f",962),
(#"i",#"i",963),
(#"l",#"l",964),
(#"n",#"n",965),
(#"o",#"o",966),
(#"t",#"t",967),
(#"v",#"v",968),
(#"w",#"w",969),
(#"{",#"{",970),
(#"|",#"|",971),
(#"}",#"}",972)], []), ([], [104]), ([], [6, 104]), ([], [4]), ([(#"=",#"=",547)], [104]), ([(#"d",#"d",477),
(#"r",#"r",478),
(#"s",#"s",479)], [104]), ([(#"o",#"o",471)], [104]), ([(#"o",#"o",446)], [104]), ([(#"n",#"n",369),
(#"q",#"q",370),
(#"x",#"x",371)], [104]), ([(#"o",#"o",343)], [104]), ([(#"g",#"g",298)], [104]), ([(#"u",#"u",272)], [104]), ([(#"a",#"a",231)], [104]), ([(#"h",#"h",107)], [104]), ([(#"n",#"n",81)], [104]), ([(#"e",#"e",72)], [104]), ([(#"e",#"e",21)], [104]), ([(#" ",#" ",22)], []), ([(#"a",#"a",23)], []), ([(#"p",#"p",24)], []), ([(#"p",#"p",25)], []), ([(#"e",#"e",26)], []), ([(#"n",#"n",27)], []), ([(#"d",#"d",28)], []), ([(#" ",#" ",29)], []), ([(#"i",#"i",30)], []), ([(#"t",#"t",31)], []), ([(#" ",#" ",32)], []), ([(#"t",#"t",33)], []), ([(#"o",#"o",34)], []), ([(#" ",#" ",35)], []), ([(#"t",#"t",36)], []), ([(#"h",#"h",37)], []), ([(#"e",#"e",38)], []), ([(#" ",#" ",39)], []), ([(#"c",#"c",40)], []), ([(#"u",#"u",41)], []), ([(#"r",#"r",42)], []), ([(#"r",#"r",43)], []), ([(#"e",#"e",44)], []), ([(#"n",#"n",45)], []), ([(#"t",#"t",46)], []), ([(#"l",#"l",47)], []), ([(#"y",#"y",48)], []), ([(#" ",#" ",49)], []), ([(#"b",#"b",50)], []), ([(#"e",#"e",51)], []), ([(#"i",#"i",52)], []), ([(#"n",#"n",53)], []), ([(#"g",#"g",54)], []), ([(#" ",#" ",55)], []), ([(#"b",#"b",56)], []), ([(#"u",#"u",57)], []), ([(#"i",#"i",58)], []), ([(#"l",#"l",59)], []), ([(#"t",#"t",60)], []), ([(#" ",#" ",61)], []), ([(#"s",#"s",62)], []), ([(#"t",#"t",63)], []), ([(#"r",#"r",64)], []), ([(#"i",#"i",65)], []), ([(#"n",#"n",66)], []), ([(#"g",#"g",67)], []), ([(#" ",#" ",68)], []), ([(#"v",#"v",69)], []), ([(#"a",#"a",70)], []), ([(#"r",#"r",71)], []), ([], [80]), ([(#"q",#"q",73)], []), ([(#"u",#"u",74)], []), ([(#"e",#"e",75)], []), ([(#"n",#"n",76)], []), ([(#"c",#"c",77)], []), ([(#"e",#"e",78)], []), ([(#"s",#"s",79)], []), ([(#".",#".",80)], []), ([], [83]), ([(#"d",#"d",82)], []), ([(#" ",#" ",83)], []), ([(#"c",#"c",84)], []), ([(#"r",#"r",85)], []), ([(#"e",#"e",86)], []), ([(#"a",#"a",87)], []), ([(#"t",#"t",88)], []), ([(#"e",#"e",89)], []), ([(#" ",#" ",90)], []), ([(#"t",#"t",91)], []), ([(#"h",#"h",92)], []), ([(#"e",#"e",93)], []), ([(#" ",#" ",94)], []), ([(#"s",#"s",95)], []), ([(#"t",#"t",96)], []), ([(#"r",#"r",97)], []), ([(#"i",#"i",98)], []), ([(#"n",#"n",99)], []), ([(#"g",#"g",100)], []), ([(#" ",#" ",101)], []), ([(#"t",#"t",102)], []), ([(#"o",#"o",103)], []), ([(#"k",#"k",104)], []), ([(#"e",#"e",105)], []), ([(#"n",#"n",106)], []), ([], [94]), ([(#"e",#"e",108)], []), ([(#"n",#"n",109)], []), ([(#" ",#" ",110)], []), ([(#"w",#"w",111)], []), ([(#"e",#"e",112)], []), ([(#" ",#" ",113)], []), ([(#"s",#"s",114)], []), ([(#"e",#"e",115)], []), ([(#"e",#"e",116)], []), ([(#" ",#" ",117)], []), ([(#"a",#"a",118)], []), ([(#" ",#" ",119),
(#"n",#"n",120)], []), ([(#"q",#"q",162)], []), ([(#"y",#"y",121)], []), ([(#"t",#"t",122)], []), ([(#"h",#"h",123)], []), ([(#"i",#"i",124)], []), ([(#"n",#"n",125)], []), ([(#"g",#"g",126)], []), ([(#" ",#" ",127)], []), ([(#"o",#"o",128)], []), ([(#"t",#"t",129)], []), ([(#"h",#"h",130)], []), ([(#"e",#"e",131)], []), ([(#"r",#"r",132)], []), ([(#" ",#" ",133)], []), ([(#"t",#"t",134)], []), ([(#"h",#"h",135)], []), ([(#"a",#"a",136)], []), ([(#"n",#"n",137)], []), ([(#" ",#" ",138)], []), ([(#"a",#"a",139)], []), ([(#" ",#" ",140)], []), ([(#"q",#"q",141)], []), ([(#"u",#"u",142)], []), ([(#"o",#"o",143)], []), ([(#"t",#"t",144)], []), ([(#"e",#"e",145)], []), ([(#" ",#" ",146)], []), ([(#"i",#"i",147)], []), ([(#"n",#"n",148)], []), ([(#"s",#"s",149)], []), ([(#"i",#"i",150)], []), ([(#"d",#"d",151)], []), ([(#"e",#"e",152)], []), ([(#" ",#" ",153)], []), ([(#"a",#"a",154)], []), ([(#" ",#" ",155)], []), ([(#"s",#"s",156)], []), ([(#"t",#"t",157)], []), ([(#"r",#"r",158)], []), ([(#"i",#"i",159)], []), ([(#"n",#"n",160)], []), ([(#"g",#"g",161)], []), ([], [79]), ([(#"u",#"u",163)], []), ([(#"o",#"o",164)], []), ([(#"t",#"t",165)], []), ([(#"e",#"e",166)], []), ([(#" ",#" ",167)], []), ([(#"i",#"i",168)], []), ([(#"n",#"n",169)], []), ([(#" ",#" ",170)], []), ([(#"I",#"I",171),
(#"S",#"S",172)], []), ([(#"N",#"N",200)], []), ([(#"T",#"T",173)], []), ([(#"R",#"R",174)], []), ([(#"I",#"I",175)], []), ([(#"N",#"N",176)], []), ([(#"G",#"G",177)], []), ([(#",",#",",178)], []), ([(#" ",#" ",179)], []), ([(#"e",#"e",180)], []), ([(#"n",#"n",181)], []), ([(#"d",#"d",182)], []), ([(#" ",#" ",183)], []), ([(#"a",#"a",184)], []), ([(#" ",#" ",185)], []), ([(#"s",#"s",186)], []), ([(#"t",#"t",187)], []), ([(#"r",#"r",188)], []), ([(#"i",#"i",189)], []), ([(#"n",#"n",190)], []), ([(#"g",#"g",191)], []), ([(#" ",#" ",192)], []), ([(#"l",#"l",193)], []), ([(#"i",#"i",194)], []), ([(#"t",#"t",195)], []), ([(#"e",#"e",196)], []), ([(#"r",#"r",197)], []), ([(#"a",#"a",198)], []), ([(#"l",#"l",199)], []), ([], [93]), ([(#"I",#"I",201)], []), ([(#"T",#"T",202)], []), ([(#"I",#"I",203)], []), ([(#"A",#"A",204)], []), ([(#"L",#"L",205)], []), ([(#",",#",",206)], []), ([(#" ",#" ",207)], []), ([(#"b",#"b",208)], []), ([(#"e",#"e",209)], []), ([(#"g",#"g",210)], []), ([(#"i",#"i",211)], []), ([(#"n",#"n",212)], []), ([(#" ",#" ",213)], []), ([(#"a",#"a",214)], []), ([(#" ",#" ",215)], []), ([(#"s",#"s",216)], []), ([(#"t",#"t",217)], []), ([(#"r",#"r",218)], []), ([(#"i",#"i",219)], []), ([(#"n",#"n",220)], []), ([(#"g",#"g",221)], []), ([(#" ",#" ",222)], []), ([(#"l",#"l",223)], []), ([(#"i",#"i",224)], []), ([(#"t",#"t",225)], []), ([(#"e",#"e",226)], []), ([(#"r",#"r",227)], []), ([(#"a",#"a",228)], []), ([(#"l",#"l",229)], []), ([(#".",#".",230)], []), ([], [77]), ([(#"r",#"r",232)], []), ([(#"s",#"s",233)], []), ([(#"e",#"e",234)], []), ([(#" ",#" ",235)], []), ([(#"a",#"a",236)], []), ([(#"n",#"n",237)], []), ([(#" ",#" ",238)], []), ([(#"i",#"i",239)], []), ([(#"n",#"n",240)], []), ([(#"t",#"t",241)], []), ([(#"e",#"e",242)], []), ([(#"g",#"g",243)], []), ([(#"e",#"e",244)], []), ([(#"r",#"r",245)], []), ([(#" ",#" ",246)], []), ([(#"v",#"v",247)], []), ([(#"a",#"a",248)], []), ([(#"l",#"l",249)], []), ([(#"u",#"u",250)], []), ([(#"e",#"e",251)], []), ([(#" ",#" ",252)], []), ([(#"f",#"f",253)], []), ([(#"r",#"r",254)], []), ([(#"o",#"o",255)], []), ([(#"m",#"m",256)], []), ([(#" ",#" ",257)], []), ([(#"a",#"a",258)], []), ([(#"n",#"n",259)], []), ([(#" ",#" ",260)], []), ([(#"i",#"i",261)], []), ([(#"n",#"n",262)], []), ([(#"t",#"t",263)], []), ([(#" ",#" ",264)], []), ([(#"l",#"l",265)], []), ([(#"i",#"i",266)], []), ([(#"t",#"t",267)], []), ([(#"e",#"e",268)], []), ([(#"r",#"r",269)], []), ([(#"a",#"a",270)], []), ([(#"l",#"l",271)], []), ([], [75]), ([(#"s",#"s",273)], []), ([(#"t",#"t",274)], []), ([(#" ",#" ",275)], []), ([(#"i",#"i",276)], []), ([(#"g",#"g",277)], []), ([(#"n",#"n",278)], []), ([(#"o",#"o",279)], []), ([(#"r",#"r",280)], []), ([(#"e",#"e",281)], []), ([(#" ",#" ",282)], []), ([(#"s",#"s",283)], []), ([(#"p",#"p",284)], []), ([(#"a",#"a",285)], []), ([(#"c",#"c",286)], []), ([(#"e",#"e",287)], []), ([(#"s",#"s",288)], []), ([(#" ",#" ",289)], []), ([(#"o",#"o",290)], []), ([(#"r",#"r",291)], []), ([(#" ",#" ",292)], []), ([(#"t",#"t",293)], []), ([(#"a",#"a",294)], []), ([(#"b",#"b",295)], []), ([(#"s",#"s",296)], []), ([(#".",#".",297)], []), ([], [5]), ([(#"n",#"n",299)], []), ([(#"o",#"o",300)], []), ([(#"r",#"r",301)], []), ([(#"e",#"e",302)], []), ([(#" ",#" ",303)], []), ([(#"s",#"s",304)], []), ([(#"y",#"y",305)], []), ([(#"m",#"m",306)], []), ([(#"b",#"b",307)], []), ([(#"o",#"o",308)], []), ([(#"l",#"l",309)], []), ([(#"s",#"s",310)], []), ([(#" ",#" ",311)], []), ([(#"a",#"a",312)], []), ([(#"n",#"n",313)], []), ([(#"d",#"d",314)], []), ([(#" ",#" ",315)], []), ([(#"r",#"r",316)], []), ([(#"e",#"e",317)], []), ([(#"s",#"s",318)], []), ([(#"e",#"e",319)], []), ([(#"r",#"r",320)], []), ([(#"v",#"v",321)], []), ([(#"e",#"e",322)], []), ([(#"d",#"d",323)], []), ([(#" ",#" ",324)], []), ([(#"w",#"w",325)], []), ([(#"o",#"o",326)], []), ([(#"r",#"r",327)], []), ([(#"d",#"d",328)], []), ([(#"s",#"s",329)], []), ([(#" ",#" ",330)], []), ([(#"i",#"i",331)], []), ([(#"n",#"n",332)], []), ([(#" ",#" ",333)], []), ([(#"c",#"c",334)], []), ([(#"o",#"o",335)], []), ([(#"m",#"m",336)], []), ([(#"m",#"m",337)], []), ([(#"e",#"e",338)], []), ([(#"n",#"n",339)], []), ([(#"t",#"t",340)], []), ([(#"s",#"s",341)], []), ([(#".",#".",342)], []), ([], [14]), ([(#"r",#"r",344)], []), ([(#" ",#" ",345)], []), ([(#"w",#"w",346)], []), ([(#"h",#"h",347)], []), ([(#"e",#"e",348)], []), ([(#"n",#"n",349)], []), ([(#" ",#" ",350)], []), ([(#"l",#"l",351)], []), ([(#"e",#"e",352)], []), ([(#"x",#"x",353)], []), ([(#"i",#"i",354)], []), ([(#"n",#"n",355)], []), ([(#"g",#"g",356)], []), ([(#" ",#" ",357)], []), ([(#"g",#"g",358)], []), ([(#"o",#"o",359)], []), ([(#"e",#"e",360)], []), ([(#"s",#"s",361)], []), ([(#" ",#" ",362)], []), ([(#"w",#"w",363)], []), ([(#"r",#"r",364)], []), ([(#"o",#"o",365)], []), ([(#"n",#"n",366)], []), ([(#"g",#"g",367)], []), ([(#".",#".",368)], []), ([], [103]), ([(#"t",#"t",389)], []), ([(#"u",#"u",383)], []), ([(#"i",#"i",372)], []), ([(#"t",#"t",373)], []), ([(#" ",#" ",374)], []), ([(#"c",#"c",375)], []), ([(#"o",#"o",376)], []), ([(#"m",#"m",377)], []), ([(#"m",#"m",378)], []), ([(#"e",#"e",379)], []), ([(#"n",#"n",380)], []), ([(#"t",#"t",381)], []), ([(#".",#".",382)], []), ([], [12]), ([(#"a",#"a",384)], []), ([(#"l",#"l",385)], []), ([(#"i",#"i",386)], []), ([(#"t",#"t",387)], []), ([(#"y",#"y",388)], []), ([], [44]), ([(#"e",#"e",390)], []), ([(#"r",#"r",391)], []), ([(#" ",#" ",392)], []), ([(#"c",#"c",393),
(#"t",#"t",394)], []), ([(#"o",#"o",439)], []), ([(#"h",#"h",395)], []), ([(#"e",#"e",396)], []), ([(#" ",#" ",397)], []), ([(#"e",#"e",398)], []), ([(#"s",#"s",399)], []), ([(#"c",#"c",400)], []), ([(#"a",#"a",401)], []), ([(#"p",#"p",402)], []), ([(#"e",#"e",403)], []), ([(#" ",#" ",404)], []), ([(#"s",#"s",405)], []), ([(#"t",#"t",406)], []), ([(#"a",#"a",407)], []), ([(#"t",#"t",408)], []), ([(#"e",#"e",409)], []), ([(#" ",#" ",410)], []), ([(#"w",#"w",411)], []), ([(#"h",#"h",412)], []), ([(#"e",#"e",413)], []), ([(#"r",#"r",414)], []), ([(#"e",#"e",415)], []), ([(#" ",#" ",416)], []), ([(#"w",#"w",417)], []), ([(#"e",#"e",418)], []), ([(#" ",#" ",419)], []), ([(#"r",#"r",420)], []), ([(#"e",#"e",421)], []), ([(#"c",#"c",422)], []), ([(#"o",#"o",423)], []), ([(#"g",#"g",424)], []), ([(#"n",#"n",425)], []), ([(#"i",#"i",426)], []), ([(#"z",#"z",427)], []), ([(#"e",#"e",428)], []), ([(#" ",#" ",429)], []), ([(#"e",#"e",430)], []), ([(#"s",#"s",431)], []), ([(#"c",#"c",432)], []), ([(#"a",#"a",433)], []), ([(#"p",#"p",434)], []), ([(#"e",#"e",435)], []), ([(#" ",#" ",436)], []), ([(#"\"",#"\"",437)], []), ([(#" ",#" ",438)], []), ([], [82]), ([(#"m",#"m",440)], []), ([(#"m",#"m",441)], []), ([(#"e",#"e",442)], []), ([(#"n",#"n",443)], []), ([(#"t",#"t",444)], []), ([(#".",#".",445)], []), ([], [10]), ([(#"u",#"u",447)], []), ([(#"n",#"n",448)], []), ([(#"t",#"t",449)], []), ([(#" ",#" ",450)], []), ([(#"a",#"a",451)], []), ([(#"n",#"n",452)], []), ([(#"d",#"d",453)], []), ([(#" ",#" ",454)], []), ([(#"i",#"i",455)], []), ([(#"g",#"g",456)], []), ([(#"n",#"n",457)], []), ([(#"o",#"o",458)], []), ([(#"r",#"r",459)], []), ([(#"e",#"e",460)], []), ([(#" ",#" ",461)], []), ([(#"n",#"n",462)], []), ([(#"e",#"e",463)], []), ([(#"w",#"w",464)], []), ([(#"l",#"l",465)], []), ([(#"i",#"i",466)], []), ([(#"n",#"n",467)], []), ([(#"e",#"e",468)], []), ([(#"s",#"s",469)], []), ([(#".",#".",470)], []), ([], [3]), ([(#"o",#"o",472)], []), ([(#"l",#"l",473)], []), ([(#"e",#"e",474)], []), ([(#"a",#"a",475)], []), ([(#"n",#"n",476)], []), ([], [41]), ([(#"d",#"d",496)], []), ([(#"i",#"i",488)], []), ([(#"s",#"s",480)], []), ([(#"i",#"i",481)], []), ([(#"g",#"g",482)], []), ([(#"n",#"n",483)], []), ([(#"m",#"m",484)], []), ([(#"e",#"e",485)], []), ([(#"n",#"n",486)], []), ([(#"t",#"t",487)], []), ([], [39]), ([(#"t",#"t",489)], []), ([(#"h",#"h",490)], []), ([(#"m",#"m",491)], []), ([(#"e",#"e",492)], []), ([(#"t",#"t",493)], []), ([(#"i",#"i",494)], []), ([(#"c",#"c",495)], []), ([], [51]), ([(#" ",#" ",497)], []), ([(#"e",#"e",498)], []), ([(#"s",#"s",499)], []), ([(#"c",#"c",500)], []), ([(#"a",#"a",501)], []), ([(#"p",#"p",502)], []), ([(#"e",#"e",503)], []), ([(#" ",#" ",504)], []), ([(#"c",#"c",505)], []), ([(#"h",#"h",506)], []), ([(#"a",#"a",507)], []), ([(#"r",#"r",508)], []), ([(#"a",#"a",509)], []), ([(#"c",#"c",510)], []), ([(#"t",#"t",511)], []), ([(#"e",#"e",512)], []), ([(#"r",#"r",513)], []), ([(#"s",#"s",514)], []), ([(#" ",#" ",515)], []), ([(#"a",#"a",516)], []), ([(#"n",#"n",517)], []), ([(#"d",#"d",518)], []), ([(#" ",#" ",519)], []), ([(#"r",#"r",520)], []), ([(#"e",#"e",521)], []), ([(#"t",#"t",522)], []), ([(#"u",#"u",523)], []), ([(#"r",#"r",524)], []), ([(#"n",#"n",525)], []), ([(#" ",#" ",526)], []), ([(#"t",#"t",527)], []), ([(#"o",#"o",528)], []), ([(#" ",#" ",529)], []), ([(#"t",#"t",530)], []), ([(#"h",#"h",531)], []), ([(#"e",#"e",532)], []), ([(#" ",#" ",533)], []), ([(#"s",#"s",534)], []), ([(#"t",#"t",535)], []), ([(#"r",#"r",536)], []), ([(#"i",#"i",537)], []), ([(#"n",#"n",538)], []), ([(#"g",#"g",539)], []), ([(#" ",#" ",540)], []), ([(#"s",#"s",541)], []), ([(#"t",#"t",542)], []), ([(#"a",#"a",543)], []), ([(#"t",#"t",544)], []), ([(#"e",#"e",545)], []), ([(#".",#".",546)], []), ([], [85]), ([(#"=",#"=",548)], []), ([(#"=",#"=",549)], []), ([(#"=",#"=",550)], []), ([(#"=",#"=",551)], []), ([(#"=",#"=",552)], []), ([(#"=",#"=",553)], []), ([(#"=",#"=",554)], []), ([(#"=",#"=",555)], []), ([(#"=",#"=",556)], []), ([(#"=",#"=",557)], []), ([(#"=",#"=",558)], []), ([(#"=",#"=",559)], []), ([(#"=",#"=",560)], []), ([(#"=",#"=",561)], []), ([(#"=",#"=",562)], []), ([(#" ",#" ",563),
(#"=",#"=",564)], []), ([(#"L",#"L",878)], []), ([(#" ",#" ",565),
(#"=",#"=",566)], []), ([(#"B",#"B",842)], []), ([(#" ",#" ",567),
(#"=",#"=",568)], []), ([(#"R",#"R",807)], []), ([(#" ",#" ",569),
(#"=",#"=",570)], []), ([(#"B",#"B",705),
(#"I",#"I",706),
(#"W",#"W",707)], []), ([(#" ",#" ",571),
(#"=",#"=",572)], []), ([(#"C",#"C",639),
(#"P",#"P",640)], []), ([(#" ",#" ",573),
(#"=",#"=",574)], []), ([(#"O",#"O",607)], []), ([(#"=",#"=",575)], []), ([(#"=",#"=",576)], []), ([(#"=",#"=",577)], []), ([(#"=",#"=",578)], []), ([(#"=",#"=",579)], []), ([(#"=",#"=",580)], []), ([(#"=",#"=",581)], []), ([(#"=",#"=",582)], []), ([(#"=",#"=",583)], []), ([(#"=",#"=",584)], []), ([(#"=",#"=",585)], []), ([(#"=",#"=",586)], []), ([(#"=",#"=",587)], []), ([(#"=",#"=",588)], []), ([(#"=",#"=",589)], []), ([(#"=",#"=",590)], []), ([(#"=",#"=",591)], []), ([(#"=",#"=",592)], []), ([(#"=",#"=",593)], []), ([(#"=",#"=",594)], []), ([(#"=",#"=",595)], []), ([(#"=",#"=",596)], []), ([(#"=",#"=",597)], []), ([(#"=",#"=",598)], []), ([(#"=",#"=",599)], []), ([(#"=",#"=",600)], []), ([(#"=",#"=",601)], []), ([(#"=",#"=",602)], []), ([(#"=",#"=",603)], []), ([(#"=",#"=",604)], []), ([(#"=",#"=",605)], []), ([(#"=",#"=",606)], []), ([], [0, 2, 7, 9, 16, 18, 36, 38, 57, 59, 66, 68, 72, 74, 96, 98, 100, 102]), ([(#"p",#"p",608)], []), ([(#"e",#"e",609)], []), ([(#"r",#"r",610)], []), ([(#"a",#"a",611)], []), ([(#"t",#"t",612)], []), ([(#"o",#"o",613)], []), ([(#"r",#"r",614)], []), ([(#"s",#"s",615)], []), ([(#" ",#" ",616)], []), ([(#"=",#"=",617)], []), ([(#"=",#"=",618)], []), ([(#"=",#"=",619)], []), ([(#"=",#"=",620)], []), ([(#"=",#"=",621)], []), ([(#"=",#"=",622)], []), ([(#"=",#"=",623)], []), ([(#"=",#"=",624)], []), ([(#"=",#"=",625)], []), ([(#"=",#"=",626)], []), ([(#"=",#"=",627)], []), ([(#"=",#"=",628)], []), ([(#"=",#"=",629)], []), ([(#"=",#"=",630)], []), ([(#"=",#"=",631)], []), ([(#"=",#"=",632)], []), ([(#"=",#"=",633)], []), ([(#"=",#"=",634)], []), ([(#"=",#"=",635)], []), ([(#"=",#"=",636)], []), ([(#"=",#"=",637)], []), ([(#"=",#"=",638)], []), ([], [37]), ([(#"o",#"o",673)], []), ([(#"u",#"u",641)], []), ([(#"n",#"n",642)], []), ([(#"c",#"c",643)], []), ([(#"t",#"t",644)], []), ([(#"u",#"u",645)], []), ([(#"a",#"a",646)], []), ([(#"t",#"t",647)], []), ([(#"i",#"i",648)], []), ([(#"o",#"o",649)], []), ([(#"n",#"n",650)], []), ([(#" ",#" ",651)], []), ([(#"=",#"=",652)], []), ([(#"=",#"=",653)], []), ([(#"=",#"=",654)], []), ([(#"=",#"=",655)], []), ([(#"=",#"=",656)], []), ([(#"=",#"=",657)], []), ([(#"=",#"=",658)], []), ([(#"=",#"=",659)], []), ([(#"=",#"=",660)], []), ([(#"=",#"=",661)], []), ([(#"=",#"=",662)], []), ([(#"=",#"=",663)], []), ([(#"=",#"=",664)], []), ([(#"=",#"=",665)], []), ([(#"=",#"=",666)], []), ([(#"=",#"=",667)], []), ([(#"=",#"=",668)], []), ([(#"=",#"=",669)], []), ([(#"=",#"=",670)], []), ([(#"=",#"=",671)], []), ([(#"=",#"=",672)], []), ([], [67]), ([(#"m",#"m",674)], []), ([(#"m",#"m",675)], []), ([(#"e",#"e",676)], []), ([(#"n",#"n",677)], []), ([(#"t",#"t",678)], []), ([(#"s",#"s",679)], []), ([(#" ",#" ",680)], []), ([(#"=",#"=",681)], []), ([(#"=",#"=",682)], []), ([(#"=",#"=",683)], []), ([(#"=",#"=",684)], []), ([(#"=",#"=",685)], []), ([(#"=",#"=",686)], []), ([(#"=",#"=",687)], []), ([(#"=",#"=",688)], []), ([(#"=",#"=",689)], []), ([(#"=",#"=",690)], []), ([(#"=",#"=",691)], []), ([(#"=",#"=",692)], []), ([(#"=",#"=",693)], []), ([(#"=",#"=",694)], []), ([(#"=",#"=",695)], []), ([(#"=",#"=",696)], []), ([(#"=",#"=",697)], []), ([(#"=",#"=",698)], []), ([(#"=",#"=",699)], []), ([(#"=",#"=",700)], []), ([(#"=",#"=",701)], []), ([(#"=",#"=",702)], []), ([(#"=",#"=",703)], []), ([(#"=",#"=",704)], []), ([], [8]), ([(#"u",#"u",774)], []), ([(#"d",#"d",741)], []), ([(#"h",#"h",708)], []), ([(#"i",#"i",709)], []), ([(#"t",#"t",710)], []), ([(#"e",#"e",711)], []), ([(#" ",#" ",712)], []), ([(#"S",#"S",713)], []), ([(#"p",#"p",714)], []), ([(#"a",#"a",715)], []), ([(#"c",#"c",716)], []), ([(#"e",#"e",717)], []), ([(#" ",#" ",718)], []), ([(#"=",#"=",719)], []), ([(#"=",#"=",720)], []), ([(#"=",#"=",721)], []), ([(#"=",#"=",722)], []), ([(#"=",#"=",723)], []), ([(#"=",#"=",724)], []), ([(#"=",#"=",725)], []), ([(#"=",#"=",726)], []), ([(#"=",#"=",727)], []), ([(#"=",#"=",728)], []), ([(#"=",#"=",729)], []), ([(#"=",#"=",730)], []), ([(#"=",#"=",731)], []), ([(#"=",#"=",732)], []), ([(#"=",#"=",733)], []), ([(#"=",#"=",734)], []), ([(#"=",#"=",735)], []), ([(#"=",#"=",736)], []), ([(#"=",#"=",737)], []), ([(#"=",#"=",738)], []), ([(#"=",#"=",739)], []), ([(#"=",#"=",740)], []), ([], [1]), ([(#"e",#"e",742)], []), ([(#"n",#"n",743)], []), ([(#"t",#"t",744)], []), ([(#"i",#"i",745)], []), ([(#"f",#"f",746)], []), ([(#"i",#"i",747)], []), ([(#"e",#"e",748)], []), ([(#"r",#"r",749)], []), ([(#"s",#"s",750)], []), ([(#" ",#" ",751)], []), ([(#"=",#"=",752)], []), ([(#"=",#"=",753)], []), ([(#"=",#"=",754)], []), ([(#"=",#"=",755)], []), ([(#"=",#"=",756)], []), ([(#"=",#"=",757)], []), ([(#"=",#"=",758)], []), ([(#"=",#"=",759)], []), ([(#"=",#"=",760)], []), ([(#"=",#"=",761)], []), ([(#"=",#"=",762)], []), ([(#"=",#"=",763)], []), ([(#"=",#"=",764)], []), ([(#"=",#"=",765)], []), ([(#"=",#"=",766)], []), ([(#"=",#"=",767)], []), ([(#"=",#"=",768)], []), ([(#"=",#"=",769)], []), ([(#"=",#"=",770)], []), ([(#"=",#"=",771)], []), ([(#"=",#"=",772)], []), ([(#"=",#"=",773)], []), ([], [97]), ([(#"i",#"i",775)], []), ([(#"l",#"l",776)], []), ([(#"t",#"t",777)], []), ([(#"-",#"-",778)], []), ([(#"i",#"i",779)], []), ([(#"n",#"n",780)], []), ([(#" ",#" ",781)], []), ([(#"t",#"t",782)], []), ([(#"y",#"y",783)], []), ([(#"p",#"p",784)], []), ([(#"e",#"e",785)], []), ([(#"s",#"s",786)], []), ([(#" ",#" ",787)], []), ([(#"=",#"=",788)], []), ([(#"=",#"=",789)], []), ([(#"=",#"=",790)], []), ([(#"=",#"=",791)], []), ([(#"=",#"=",792)], []), ([(#"=",#"=",793)], []), ([(#"=",#"=",794)], []), ([(#"=",#"=",795)], []), ([(#"=",#"=",796)], []), ([(#"=",#"=",797)], []), ([(#"=",#"=",798)], []), ([(#"=",#"=",799)], []), ([(#"=",#"=",800)], []), ([(#"=",#"=",801)], []), ([(#"=",#"=",802)], []), ([(#"=",#"=",803)], []), ([(#"=",#"=",804)], []), ([(#"=",#"=",805)], []), ([(#"=",#"=",806)], []), ([], [73]), ([(#"e",#"e",808)], []), ([(#"s",#"s",809)], []), ([(#"e",#"e",810)], []), ([(#"r",#"r",811)], []), ([(#"v",#"v",812)], []), ([(#"e",#"e",813)], []), ([(#"d",#"d",814)], []), ([(#" ",#" ",815)], []), ([(#"W",#"W",816)], []), ([(#"o",#"o",817)], []), ([(#"r",#"r",818)], []), ([(#"d",#"d",819)], []), ([(#"s",#"s",820)], []), ([(#" ",#" ",821)], []), ([(#"=",#"=",822)], []), ([(#"=",#"=",823)], []), ([(#"=",#"=",824)], []), ([(#"=",#"=",825)], []), ([(#"=",#"=",826)], []), ([(#"=",#"=",827)], []), ([(#"=",#"=",828)], []), ([(#"=",#"=",829)], []), ([(#"=",#"=",830)], []), ([(#"=",#"=",831)], []), ([(#"=",#"=",832)], []), ([(#"=",#"=",833)], []), ([(#"=",#"=",834)], []), ([(#"=",#"=",835)], []), ([(#"=",#"=",836)], []), ([(#"=",#"=",837)], []), ([(#"=",#"=",838)], []), ([(#"=",#"=",839)], []), ([(#"=",#"=",840)], []), ([(#"=",#"=",841)], []), ([], [17]), ([(#"r",#"r",843)], []), ([(#"a",#"a",844)], []), ([(#"c",#"c",845)], []), ([(#"e",#"e",846)], []), ([(#"s",#"s",847)], []), ([(#" ",#" ",848)], []), ([(#"a",#"a",849)], []), ([(#"n",#"n",850)], []), ([(#"d",#"d",851)], []), ([(#" ",#" ",852)], []), ([(#"P",#"P",853)], []), ([(#"a",#"a",854)], []), ([(#"r",#"r",855)], []), ([(#"e",#"e",856)], []), ([(#"n",#"n",857)], []), ([(#"s",#"s",858)], []), ([(#" ",#" ",859)], []), ([(#"=",#"=",860)], []), ([(#"=",#"=",861)], []), ([(#"=",#"=",862)], []), ([(#"=",#"=",863)], []), ([(#"=",#"=",864)], []), ([(#"=",#"=",865)], []), ([(#"=",#"=",866)], []), ([(#"=",#"=",867)], []), ([(#"=",#"=",868)], []), ([(#"=",#"=",869)], []), ([(#"=",#"=",870)], []), ([(#"=",#"=",871)], []), ([(#"=",#"=",872)], []), ([(#"=",#"=",873)], []), ([(#"=",#"=",874)], []), ([(#"=",#"=",875)], []), ([(#"=",#"=",876)], []), ([(#"=",#"=",877)], []), ([], [58]), ([(#"a",#"a",879)], []), ([(#"s",#"s",880)], []), ([(#"t",#"t",881)], []), ([(#" ",#" ",882)], []), ([(#"c",#"c",883)], []), ([(#"h",#"h",884)], []), ([(#"a",#"a",885)], []), ([(#"n",#"n",886)], []), ([(#"c",#"c",887)], []), ([(#"e",#"e",888)], []), ([(#" ",#" ",889)], []), ([(#"e",#"e",890)], []), ([(#"r",#"r",891)], []), ([(#"r",#"r",892)], []), ([(#"o",#"o",893)], []), ([(#"r",#"r",894)], []), ([(#"s",#"s",895)], []), ([(#" ",#" ",896)], []), ([(#"=",#"=",897)], []), ([(#"=",#"=",898)], []), ([(#"=",#"=",899)], []), ([(#"=",#"=",900)], []), ([(#"=",#"=",901)], []), ([(#"=",#"=",902)], []), ([(#"=",#"=",903)], []), ([(#"=",#"=",904)], []), ([(#"=",#"=",905)], []), ([(#"=",#"=",906)], []), ([(#"=",#"=",907)], []), ([(#"=",#"=",908)], []), ([(#"=",#"=",909)], []), ([(#"=",#"=",910)], []), ([(#"=",#"=",911)], []), ([(#"=",#"=",912)], []), ([(#"=",#"=",913)], []), ([(#"=",#"=",914)], []), ([], [101]), ([(#"\t",#"\n",924),
(#"\r",#"\r",924),
(#" ",#" ",924),
(#"f",#"f",924),
(#"\\",#"\\",925)], [6, 104]), ([(#"\t",#"\n",924),
(#"\r",#"\r",924),
(#" ",#" ",924),
(#"f",#"f",924),
(#"\\",#"\\",925)], [4]), ([], [89, 104]), ([(#"0",#"9",927)], [104]), ([], [90, 104]), ([(#"?",#"_",926)], [104]), ([(#"\t",#"\n",924),
(#"\r",#"\r",924),
(#" ",#" ",924),
(#"f",#"f",924),
(#"\\",#"\\",925)], [104]), ([], [86, 104]), ([], [87, 104]), ([(#"\t",#"\n",924),
(#"\r",#"\r",924),
(#" ",#" ",924),
(#"f",#"f",924),
(#"\\",#"\\",925)], []), ([], [91]), ([], [92]), ([(#"0",#"9",928)], []), ([], [88]), ([(#"\^@",#"!",934),
(#"#",#"[",934),
(#"]",#"\255",934)], [81, 104]), ([(#"\^@",#"!",934),
(#"#",#"[",934),
(#"]",#"\255",934)], [6, 81, 104]), ([(#"\^@",#"!",934),
(#"#",#"[",934),
(#"]",#"\255",934)], [4, 81]), ([], [95, 104]), ([], [84, 104]), ([(#"\^@",#"!",934),
(#"#",#"[",934),
(#"]",#"\255",934)], [81]), ([], [15, 104]), ([], [6, 15, 104]), ([(#"/",#"/",938)], [15, 104]), ([], [13]), ([], [78, 104]), ([], [43, 104]), ([], [64, 104]), ([], [65, 104]), ([], [53, 104]), ([], [55, 104]), ([], [71, 104]), ([], [54, 104]), ([], [56, 104]), ([(#"*",#"*",1022)], [52, 104]), ([(#"0",#"9",1021)], [76, 104]), ([(#"=",#"=",1020)], [70, 104]), ([], [69, 104]), ([(#"=",#"=",1018),
(#">",#">",1019)], [48, 104]), ([], [50, 104]), ([(#"=",#"=",1017)], [46, 104]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"a",#"z",973)], [99, 104]), ([], [62, 104]), ([], [63, 104]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"a",#"q",973),
(#"s",#"z",973),
(#"r",#"r",1013)], [99, 104]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"a",#"q",973),
(#"s",#"z",973),
(#"r",#"r",1009)], [99, 104]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"a",#"n",973),
(#"p",#"z",973),
(#"o",#"o",1008)], [99, 104]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"a",#"k",973),
(#"m",#"m",973),
(#"o",#"z",973),
(#"l",#"l",1003),
(#"n",#"n",1004)], [99, 104]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"a",#"n",973),
(#"p",#"t",973),
(#"v",#"z",973),
(#"o",#"o",994),
(#"u",#"u",995)], [99, 104]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"a",#"e",973),
(#"g",#"m",973),
(#"o",#"z",973),
(#"f",#"f",992),
(#"n",#"n",993)], [99, 104]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"a",#"d",973),
(#"f",#"z",973),
(#"e",#"e",990)], [99, 104]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"a",#"h",973),
(#"j",#"z",973),
(#"i",#"i",988)], [99, 104]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"a",#"e",973),
(#"g",#"z",973),
(#"f",#"f",987)], [99, 104]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"a",#"g",973),
(#"i",#"n",973),
(#"p",#"x",973),
(#"z",#"z",973),
(#"h",#"h",980),
(#"o",#"o",981),
(#"y",#"y",982)], [99, 104]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"b",#"z",973),
(#"a",#"a",978)], [99, 104]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"a",#"g",973),
(#"i",#"z",973),
(#"h",#"h",974)], [99, 104]), ([], [60, 104]), ([], [42, 104]), ([], [61, 104]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"a",#"z",973)], [99]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"a",#"h",973),
(#"j",#"z",973),
(#"i",#"i",975)], [99]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"a",#"k",973),
(#"m",#"z",973),
(#"l",#"l",976)], [99]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"a",#"d",973),
(#"f",#"z",973),
(#"e",#"e",977)], [99]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"a",#"z",973)], [19, 99]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"a",#"q",973),
(#"s",#"z",973),
(#"r",#"r",979)], [99]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"a",#"z",973)], [27, 99]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"a",#"d",973),
(#"f",#"z",973),
(#"e",#"e",985)], [99]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"a",#"z",973)], [21, 99]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"a",#"o",973),
(#"q",#"z",973),
(#"p",#"p",983)], [99]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"a",#"d",973),
(#"f",#"z",973),
(#"e",#"e",984)], [99]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"a",#"z",973)], [28, 99]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"a",#"m",973),
(#"o",#"z",973),
(#"n",#"n",986)], [99]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"a",#"z",973)], [31, 99]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"a",#"z",973)], [34, 99]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"a",#"k",973),
(#"m",#"z",973),
(#"l",#"l",989)], [99]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"a",#"z",973)], [35, 99]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"a",#"s",973),
(#"u",#"z",973),
(#"t",#"t",991)], [99]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"a",#"z",973)], [23, 99]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"a",#"z",973)], [30, 99]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"a",#"z",973)], [24, 99]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"a",#"q",973),
(#"s",#"z",973),
(#"r",#"r",1002)], [99]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"a",#"m",973),
(#"o",#"z",973),
(#"n",#"n",996)], [99]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"a",#"b",973),
(#"d",#"z",973),
(#"c",#"c",997)], [99]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"a",#"s",973),
(#"u",#"z",973),
(#"t",#"t",998)], [99]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"a",#"h",973),
(#"j",#"z",973),
(#"i",#"i",999)], [99]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"a",#"n",973),
(#"p",#"z",973),
(#"o",#"o",1000)], [99]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"a",#"m",973),
(#"o",#"z",973),
(#"n",#"n",1001)], [99]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"a",#"z",973)], [26, 99]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"a",#"z",973)], [20, 99]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"a",#"r",973),
(#"t",#"z",973),
(#"s",#"s",1006)], [99]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"a",#"c",973),
(#"e",#"z",973),
(#"d",#"d",1005)], [99]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"a",#"z",973)], [25, 99]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"a",#"d",973),
(#"f",#"z",973),
(#"e",#"e",1007)], [99]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"a",#"z",973)], [32, 99]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"a",#"z",973)], [33, 99]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"a",#"d",973),
(#"f",#"z",973),
(#"e",#"e",1010)], [99]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"b",#"z",973),
(#"a",#"a",1011)], [99]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"a",#"j",973),
(#"l",#"z",973),
(#"k",#"k",1012)], [99]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"a",#"z",973)], [22, 99]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"a",#"q",973),
(#"s",#"z",973),
(#"r",#"r",1014)], [99]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"b",#"z",973),
(#"a",#"a",1015)], [99]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"a",#"x",973),
(#"z",#"z",973),
(#"y",#"y",1016)], [99]), ([(#"0",#"9",973),
(#"A",#"Z",973),
(#"_",#"_",973),
(#"a",#"z",973)], [29, 99]), ([], [45]), ([], [47]), ([], [49]), ([], [40]), ([(#"0",#"9",1021)], [76]), ([], [11])]
    fun mk yyins = let
        (* current start state *)
        val yyss = ref INITIAL
	fun YYBEGIN ss = (yyss := ss)
	(* current input stream *)
        val yystrm = ref yyins
	(* get one char of input *)
	val yygetc = yyInput.getc
	(* create yytext *)
	fun yymktext(strm) = yyInput.subtract (strm, !yystrm)
        open UserDeclarations
        fun lex 
(yyarg as ()) = let 
     fun continue() = let
            val yylastwasn = yyInput.lastWasNL (!yystrm)
            fun yystuck (yyNO_MATCH) = raise Fail "stuck state"
	      | yystuck (yyMATCH (strm, action, old)) = 
		  action (strm, old)
	    val yypos = yyInput.getpos (!yystrm)
	    val yygetlineNo = yyInput.getlineNo
	    fun yyactsToMatches (strm, [],	  oldMatches) = oldMatches
	      | yyactsToMatches (strm, act::acts, oldMatches) = 
		  yyMATCH (strm, act, yyactsToMatches (strm, acts, oldMatches))
	    fun yygo actTable = 
		(fn (~1, _, oldMatches) => yystuck oldMatches
		  | (curState, strm, oldMatches) => let
		      val (transitions, finals') = Vector.sub (yytable, curState)
		      val finals = List.map (fn i => Vector.sub (actTable, i)) finals'
		      fun tryfinal() = 
		            yystuck (yyactsToMatches (strm, finals, oldMatches))
		      fun find (c, []) = NONE
			| find (c, (c1, c2, s)::ts) = 
		            if c1 <= c andalso c <= c2 then SOME s
			    else find (c, ts)
		      in case yygetc strm
			  of SOME(c, strm') => 
			       (case find (c, transitions)
				 of NONE => tryfinal()
				  | SOME n => 
				      yygo actTable
					(n, strm', 
					 yyactsToMatches (strm, finals, oldMatches)))
			   | NONE => tryfinal()
		      end)
	    in 
let
fun yyAction0 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction1 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction2 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction3 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction4 (strm, lastMatch : yymatch) = (yystrm := strm;
      (lineNum := !lineNum + 1;
            linePos := yypos :: !linePos;
            continue ()))
fun yyAction5 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction6 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction7 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction8 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction9 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction10 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction11 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN COMMENT; inComment := true; continue ()))
fun yyAction12 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction13 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN INITIAL; inComment := false; continue ()))
fun yyAction14 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction15 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction16 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction17 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction18 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction19 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.WHILE (s_e yypos yytext))
      end
fun yyAction20 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.FOR (s_e yypos yytext))
      end
fun yyAction21 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.TO (s_e yypos yytext))
      end
fun yyAction22 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.BREAK (s_e yypos yytext))
      end
fun yyAction23 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.LET (s_e yypos yytext))
      end
fun yyAction24 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.IN (s_e yypos yytext))
      end
fun yyAction25 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.END (s_e yypos yytext))
      end
fun yyAction26 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.FUNCTION (s_e yypos yytext))
      end
fun yyAction27 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.VAR (s_e yypos yytext))
      end
fun yyAction28 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.TYPE (s_e yypos yytext))
      end
fun yyAction29 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.ARRAY (s_e yypos yytext))
      end
fun yyAction30 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.IF (s_e yypos yytext))
      end
fun yyAction31 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.THEN (s_e yypos yytext))
      end
fun yyAction32 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.ELSE (s_e yypos yytext))
      end
fun yyAction33 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.DO (s_e yypos yytext))
      end
fun yyAction34 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.OF (s_e yypos yytext))
      end
fun yyAction35 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.NIL (s_e yypos yytext))
      end
fun yyAction36 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction37 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction38 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction39 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction40 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.ASSIGN (s_e yypos yytext))
      end
fun yyAction41 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction42 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.OR (s_e yypos yytext))
      end
fun yyAction43 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.AND (s_e yypos yytext))
      end
fun yyAction44 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction45 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.GE (s_e yypos yytext))
      end
fun yyAction46 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.GT (s_e yypos yytext))
      end
fun yyAction47 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.LE (s_e yypos yytext))
      end
fun yyAction48 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.LT (s_e yypos yytext))
      end
fun yyAction49 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.NEQ (s_e yypos yytext))
      end
fun yyAction50 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.EQ (s_e yypos yytext))
      end
fun yyAction51 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction52 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.DIVIDE (s_e yypos yytext))
      end
fun yyAction53 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.TIMES (s_e yypos yytext))
      end
fun yyAction54 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.MINUS (s_e yypos yytext))
      end
fun yyAction55 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.PLUS (s_e yypos yytext))
      end
fun yyAction56 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.DOT (s_e yypos yytext))
      end
fun yyAction57 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction58 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction59 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction60 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.LBRACE (s_e yypos yytext))
      end
fun yyAction61 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.RBRACE (s_e yypos yytext))
      end
fun yyAction62 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.LBRACK (s_e yypos yytext))
      end
fun yyAction63 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.RBRACK (s_e yypos yytext))
      end
fun yyAction64 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.LPAREN (s_e yypos yytext))
      end
fun yyAction65 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.RPAREN (s_e yypos yytext))
      end
fun yyAction66 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction67 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction68 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction69 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.SEMICOLON (s_e yypos yytext))
      end
fun yyAction70 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.COLON (s_e yypos yytext))
      end
fun yyAction71 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.COMMA (s_e yypos yytext))
      end
fun yyAction72 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction73 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction74 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction75 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction76 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (let val (s, e) = s_e yypos yytext
                        in  Tokens.INT (valOf (Int.fromString yytext), s, e)
                        end)
      end
fun yyAction77 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction78 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN STRING; continue ()))
fun yyAction79 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction80 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction81 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (currentString := !currentString ^ yytext;
                      continue ())
      end
fun yyAction82 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction83 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction84 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN ESCAPE; continue ()))
fun yyAction85 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction86 (strm, lastMatch : yymatch) = (yystrm := strm;
      (currentString := !currentString ^ "\n"; 
                YYBEGIN STRING; 
                continue ()))
fun yyAction87 (strm, lastMatch : yymatch) = (yystrm := strm;
      (currentString := !currentString ^ "\t"; 
                YYBEGIN STRING; 
                continue ()))
fun yyAction88 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (let val newChar = (Char.toString 
                                                  (chr 
                                                    (valOf 
                                                      (Int.fromString yytext))))
                              in currentString := !currentString ^ newChar
                              end; YYBEGIN STRING; continue())
      end
fun yyAction89 (strm, lastMatch : yymatch) = (yystrm := strm;
      (currentString := !currentString ^ "\"";
                  YYBEGIN STRING;
                  continue ()))
fun yyAction90 (strm, lastMatch : yymatch) = (yystrm := strm;
      (currentString := !currentString ^ "\\";
                YYBEGIN STRING;
                continue ()))
fun yyAction91 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN STRING; continue ()))
fun yyAction92 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (let val ctrlChr = (String.str 
                                                       (valOf 
                                                         (Char.fromString 
                                                           ("\\" ^ yytext))))
                                   in  currentString := !currentString ^ ctrlChr
                                   end; YYBEGIN STRING; continue ())
      end
fun yyAction93 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction94 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction95 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (YYBEGIN INITIAL;
                  let val (s, e) = s_e yypos yytext;
                      val text   = !currentString
                  in  currentString := "";
                      Tokens.STRING (text, e - (String.size (text)), e)
                  end)
      end
fun yyAction96 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction97 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction98 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction99 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (let val (s, e) = s_e yypos yytext
                                      in  Tokens.ID (yytext, s, e)
                                      end)
      end
fun yyAction100 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction101 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction102 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction103 (strm, lastMatch : yymatch) = (yystrm := strm; (continue ()))
fun yyAction104 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (ErrorMsg.error yypos ("illegal character " ^ yytext
                              ^ "(ASCII "
                              ^ (Int.toString
                                  (Char.ord (hd (String.explode yytext)))) 
                              ^ ")"); 
        continue ())
      end
val yyactTable = Vector.fromList([yyAction0, yyAction1, yyAction2, yyAction3,
  yyAction4, yyAction5, yyAction6, yyAction7, yyAction8, yyAction9, yyAction10,
  yyAction11, yyAction12, yyAction13, yyAction14, yyAction15, yyAction16,
  yyAction17, yyAction18, yyAction19, yyAction20, yyAction21, yyAction22,
  yyAction23, yyAction24, yyAction25, yyAction26, yyAction27, yyAction28,
  yyAction29, yyAction30, yyAction31, yyAction32, yyAction33, yyAction34,
  yyAction35, yyAction36, yyAction37, yyAction38, yyAction39, yyAction40,
  yyAction41, yyAction42, yyAction43, yyAction44, yyAction45, yyAction46,
  yyAction47, yyAction48, yyAction49, yyAction50, yyAction51, yyAction52,
  yyAction53, yyAction54, yyAction55, yyAction56, yyAction57, yyAction58,
  yyAction59, yyAction60, yyAction61, yyAction62, yyAction63, yyAction64,
  yyAction65, yyAction66, yyAction67, yyAction68, yyAction69, yyAction70,
  yyAction71, yyAction72, yyAction73, yyAction74, yyAction75, yyAction76,
  yyAction77, yyAction78, yyAction79, yyAction80, yyAction81, yyAction82,
  yyAction83, yyAction84, yyAction85, yyAction86, yyAction87, yyAction88,
  yyAction89, yyAction90, yyAction91, yyAction92, yyAction93, yyAction94,
  yyAction95, yyAction96, yyAction97, yyAction98, yyAction99, yyAction100,
  yyAction101, yyAction102, yyAction103, yyAction104])
in
  if yyInput.eof(!(yystrm))
    then UserDeclarations.eof(yyarg)
    else (case (!(yyss))
       of REM => yygo yyactTable (0, !(yystrm), yyNO_MATCH)
        | ESCAPE => yygo yyactTable (1, !(yystrm), yyNO_MATCH)
        | STRING => yygo yyactTable (2, !(yystrm), yyNO_MATCH)
        | COMMENT => yygo yyactTable (3, !(yystrm), yyNO_MATCH)
        | INITIAL => yygo yyactTable (4, !(yystrm), yyNO_MATCH)
      (* end case *))
end
            end
	  in 
            continue() 	  
	    handle IO.Io{cause, ...} => raise cause
          end
        in 
          lex 
        end
    in
    fun makeLexer yyinputN = mk (yyInput.mkStream yyinputN)
    end

  end
